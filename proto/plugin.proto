syntax = "proto3";

package plugin;

service PluginAPI {
    // Plugin Registration Functions
    rpc RegisterPlugin(PluginRegistrationRequest) returns (PluginRegistrationResponse);

    // Plugin Heartbeat
    rpc Heartbeat(Empty) returns (Empty);

    // RPC Functions

    rpc JsonRPCPublish(JSONRpcMessage) returns (Empty);

    rpc JsonRPCSubscribe(Empty) returns (stream JSONRpcMessage);

    // Network Configuration Functions
    rpc UpdateDriverStationExpectedIP(DriverStationUpdateExpectedIP) returns (DriverStation);

    // Field Functions
    rpc OnFieldStateUpdate(Empty) returns (stream FieldState);

    rpc OnFieldTerminate(Empty) returns (stream FieldState);

    rpc GetFieldState(Empty) returns (FieldState);

    rpc ConfigureField(FieldConfiguration) returns (FieldState);

    rpc UpdateFieldTimer(FieldTimerUpdate) returns (FieldState);

    //Enabler Functions

    rpc UpdateEnabler(EnablerConfig) returns (Empty);

    rpc RemoveEnabler(EnablerQuery) returns (Empty);

    //Estopper Functions

    rpc UpdateEstopper(EstopperConfig) returns (Empty);

    rpc RemoveEstopper(EstopperQuery) returns (Empty);

    // DriverStation Functions

    rpc OnDriverStationCreate(Empty) returns (stream DriverStation);

    rpc OnDriverStationUpdate(DriverStationQuery) returns (stream DriverStation);

    rpc OnDriverStationDelete(Empty) returns (stream DriverStation);

    rpc GetDriverStations(Empty) returns (DriverStations);

    rpc GetDriverStation(DriverStationQuery) returns (DriverStation);

    rpc GetDriverStationLogs(DriverStationQuery) returns (LogMessages);

    rpc AddDriverStation(DriverStationParams) returns (DriverStation);

    rpc DeleteDriverStation(DriverStationParams) returns (Empty);

    rpc UpdateDriverStationMode(DriverStationUpdateMode) returns (Empty);
}

// Utility Messages

message Empty {}

// Enums

enum Mode {
    TELEOP = 0;
    TEST = 1;
    AUTONOMOUS = 2;
}

enum DriverstationStatus {
    GOOD = 0;
    BAD = 1;
    WAITING = 2;
}

enum AllianceStation {
    RED1 = 0;
    RED2 = 1;
    RED3 = 2;
    BLUE1 = 3;
    BLUE2 = 4;
    BLUE3 = 5;
    NONE = 6;
}

enum TournamentLevel {
    TESTING = 0;
    PRACTICE = 1;
    QUALIFICATION = 2;
    PLAYOFF = 3;
}

// Plugin Registration Messages
message PluginMetadata {
    string id = 1;
    optional string name = 2;
    optional string description = 3;
    optional string readme = 4;
    optional string version = 5;
    repeated string authors = 6;
    optional string src_url = 7;
    optional string docs_url = 8;
}

message PluginRegistrationRequest {
    string registration_token = 1;
    PluginMetadata plugin = 2;
}

message PluginRegistrationResponse {
    string token = 1;
}

message JSONRpcMessage {
    string plugin_id = 1;
    string data = 2;
}

// Field Messages

message FieldState {
    string event_name = 1;
    TournamentLevel tournament_level = 2;
    uint32 match_number = 3;
    uint32 play_number = 4;
    DiffTimer timer = 5;
}

message FieldConfiguration {
    string event_name = 1;
    TournamentLevel tournament_level = 2;
    uint32 match_number = 3;
    uint32 play_number = 4;
}

message FieldTimerUpdate {
    optional uint64 time_remaining = 1;
    bool running = 2;
}

// DriverStation Messages

message DriverStations {
    repeated DriverStation driver_stations = 1;
}

enum DriverStationQueryType {
    TEAMNUMBER = 0;
    ALLIANCESTATION = 1;
}

message DriverStationQuery {
    DriverStationQueryType query_type = 1;
    uint32 team_number = 2;
    AllianceStation alliance_station = 3;
}

message DriverStationParams {
    uint32 team_number = 1;
    AllianceStation alliance_station = 2;
}

message DriverStationUpdateExpectedIP {
    uint32 team_number = 1;
    string expected_ip = 2;
}

message DriverStationUpdateMode {
    uint32 team_number = 1;
    Mode mode = 2;
}

message DriverStation {
    uint32 team_number = 1;
    AllianceStation alliance_station = 2;
    optional string expected_ip = 3;
    optional DriverStationConnection connection = 4;
    optional DriverStationConfirmedState confirmed_state = 5;
    optional LogData log_data = 6;
    repeated Version versions = 7;
}

message Version {
    string type = 1;
    string version = 2;
}

message LogData {
    uint32 trip_time = 1;
    uint32 lost_packets = 2;
    bool brownout = 3;
    bool watchdog = 4;
    bool ds_teleop = 5;
    bool ds_auto = 6;
    bool ds_disable = 7;
    bool robot_teleop = 8;
    bool robot_auto = 9;
    bool robot_disable = 10;
    uint32 can_utilization = 11;
    uint32 signal = 12;
    float bandwidth = 13;
}

message LogMessages {
    repeated LogMessage messages = 1;
}

message LogMessage {
    uint64 timestamp = 1;
    string message = 2;
}

message DriverStationConnection {
    bool alive = 1;
    string ip = 2;
    uint32 outgoing_sequence_num = 3;
}

message DriverStationConfirmedState {
    bool is_emergency_stopped = 1;
    bool robot_communications_active = 2;
    bool can_ping_radio = 3;
    bool can_ping_rio = 4;
    bool is_enabled = 5;
    Mode mode = 6;
    uint32 team_number = 7;
    float battery_voltage = 8;
}

// Enablers

message EnablerQuery {
    string id = 1;
}

message EnablerConfig {
    string id = 1;
    string name = 2;
    oneof enabler {
        AllEnablerConfig all_enabler = 3;
        TeamNumberEnablerConfig team_number_enabler = 4;
        AllianceStationEnablerConfig alliance_station_enabler = 5;
    }
}

message AllEnablerConfig {
    bool active = 1;
}

message TeamNumberEnablerConfig {
    repeated uint32 approved_team_numbers = 1;
}

message AllianceStationEnablerConfig {
    repeated AllianceStation approved_stations = 1;
}

// Estoppers

message EstopperQuery {
    string id = 1;
}

message EstopperConfig {
    string id = 1;
    string name = 2;
    oneof estopper {
        AllEstopperConfig all_estopper = 3;
        TeamNumberEstopperConfig team_number_estopper = 4;
        AllianceStationEstopperConfig alliance_station_estopper = 5;
    }
}

message AllEstopperConfig {
    bool active = 1;
}

message TeamNumberEstopperConfig {
    repeated uint32 estopped_team_numbers = 1;
}

message AllianceStationEstopperConfig {
    repeated AllianceStation estopped_stations = 1;
}

// Generics

/// DiffTimer is a way to represent the game time remaining in a way that can easily be synced
/// between different displaying devices provided they all use NTP.
///
/// If started_at is 0, then the timer is currently frozen and time_remaining represents the milliseconds that should be displayed
///
/// If started_at is >0, then the timer is currently running and time_remaining represents the milliseconds
/// that the clock had at the time specified by started_at (epoch time in ms).
message DiffTimer {
    uint64 started_at = 1;
    uint64 time_remaining = 2;
}